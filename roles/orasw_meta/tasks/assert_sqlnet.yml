---
- name: assert ansible-oracle variables
  tags:
    - always
    - assert_ansible_oracle
  block:
    - name: assert sqlnet_installed
      block:
        - name: assert sqlnet_installed
          ansible.builtin.assert:
            quiet: true
            that:
              - sqlni.home is defined
              - db_homes_config[sqlni.home] is defined
              - sqlni.state is defined
              - sqlni.state in ['absent', 'present']
              - sqlni.sqlnet is defined
              - sqlnet_config[sqlni.sqlnet] is defined
          with_items:
            - "{{ sqlnet_installed }}"
          loop_control:
            label: "{{ sqlni.key | default('') }}"
            loop_var: sqlni
          when:
            - sqlnet_installed is defined
          register: assertsqlnet_installed

      rescue:

        - name: assert failed assertsqlnet_installed
          ansible.builtin.debug:
            msg: "{{ item.assertion }}"
          with_items:
            - "{{ assertsqlnet_installed['results'] }}"
          loop_control:
            label: "{{ item['sqlni']['key'] | default('') }}"
          when:
            - assertsqlnet_installed.results is defined
            - item.failed is defined
            - item.failed | bool

        - name: fail assertsqlnet_installed
          ansible.builtin.fail:
            msg: "See previous debug task for assertation failure"

    - name: assert tnsnames_installed
      block:
        - name: assert tnsnames_installed
          ansible.builtin.assert:
            quiet: true
            that:
              - tnsni.home is defined
              - db_homes_config[tnsni.home] is defined
              - tnsni.state is defined
              - tnsni.state in ['absent', 'present']
              - tnsni.tnsname is defined
              - oracle_tnsnames_config[tnsni.tnsname] is defined
          with_items:
            - "{{ tnsnames_installed }}"
          loop_control:
            label: "{{ tnsni.key | default('') }}"
            loop_var: tnsni
          when:
            - tnsnames_installed is defined
          register: asserttnsnames_installed

      rescue:

        - name: assert failed asserttnsnames_installed
          ansible.builtin.debug:
            msg: "{{ item.assertion }}"
          with_items:
            - "{{ asserttnsnames_installed['results'] }}"
          loop_control:
            label: "{{ item['tnsni']['key'] | default('') }}"
          when:
            - asserttnsnames_installed.results is defined
            - item.failed is defined
            - item.failed | bool

        - name: fail asserttnsnames_installed
          ansible.builtin.fail:
            msg: "See previous debug task for assertation failure"

    - name: assert listener_installed
      block:
        - name: assert listener_installed
          ansible.builtin.assert:
            quiet: true
            that:
              - lsnri.home is defined
              - db_homes_config[lsnri.home] is defined
              - lsnri.state is defined
              - lsnri.state in ['absent', 'present']
              - lsnri.listener_name is defined
              - oracle_listeners_config[lsnri.listener_name] is defined
          with_items:
            - "{{ listener_installed }}"
          loop_control:
            label: "{{ lsnri.key | default('') }}"
            loop_var: lsnri
          when:
            - listener_installed is defined
          register: assertlistener_installed

      rescue:

        - name: assert failed assertlistener_installed
          ansible.builtin.debug:
            msg: "{{ item.assertion }}"
          with_items:
            - "{{ assertlistener_installed['results'] }}"
          loop_control:
            label: "{{ item['lsnri']['key'] | default('') }}"
          when:
            - assertlistener_installed.results is defined
            - item.failed is defined
            - item.failed | bool

        - name: fail assertlistener_installed
          ansible.builtin.fail:
            msg: "See previous debug task for assertation failure"
