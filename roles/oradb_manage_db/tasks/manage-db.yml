---
- name: Assert oracle_home_db
  ansible.builtin.assert:
    that:
      - _oracle_home_db | length > 0
    quiet: true
  tags: always

# We need to check if password is set in inventory
# => Check for password length
- name: Assert sys Password
  ansible.builtin.assert:
    quiet: true
    that:
      - _oradb_manage_db_dbca_sys_pass | length > 0
    fail_msg: Please set dbpasswords and/or default_dbpass in inventory.
  when:
    - odb.state in ('present', 'absent')

- name: manage_db | check if GI is present
  ansible.builtin.stat:
    path: /etc/oracle/olr.loc
  register: olrloc
  tags: update_oratab

- name: manage_db | Deploy ocenv.sh
  ansible.builtin.include_tasks: ocenv.yml
  when: deploy_ocenv
  tags:
    - always

# The systemd service needs an information for
# starting the listener from right home
# Mapping from listener to ORACLE_HOME is done with oracle_databases
# => use the old .profile_<DB_SID> for this
# => use the loop over oracle_databases
- name: listener | Deploy dotprofile for listener autostart
  ansible.builtin.template:
    src: dotprofile-db.j2
    dest: >-
      {{ oracle_user_home }}/.profile_{{ odb.oracle_db_instance_name
            | default(odb.oracle_db_unique_name)
            | default(odb.oracle_db_name) }}
    owner: "{{ oracle_user }}"
    group: "{{ oracle_group }}"
    mode: 0644
  when: odb.state == 'present'
  loop_control:
    label: >-
      db_name: {{ odb.oracle_db_name | default('') }}
      listener: {{ odb.listener_name | default('') }}
  tags: listener2

- name: state
  ansible.builtin.debug:
    msg: "Maintaining DB - {{ odb.oracle_db_name }}, ORACLE_HOME - {{ _oracle_home_db }}"
  run_once: "{{ _oraswgi_meta_configure_cluster }}"
  when: odb.state == 'present'

# dbca_copy_template is for special situations, when using DBCA-templates
# without executing a template task before.
- name: manage_db | Copy custom dbca Templates for Database to ORACLE_HOME/assistants/dbca/templates
  ansible.builtin.template:
    src: "{{ (odb.dbca_templatepath | default(''), item) | path_join }}"
    dest: "{{ _oracle_home_db }}/assistants/dbca/templates/{{ odb.oracle_db_name }}_{{ item }}"
    owner: "{{ oracle_user }}"
    group: "{{ oracle_group }}"
    mode: "0640"
  when:
    - odb.state == 'present'
    - odb.dbca_templatename is defined
    - odb.dbca_copy_template | default(true)
    - odb.dbca_templatename not in('New_Database.dbt','General_Purpose.dbc')
  with_items:
    - "{{ odb.dbca_templatename }}"
    - "{{ odb.customscripts | default([]) }}"
  tags:
    - customdbcatemplate
    - dbcatemplate

- name: manage_db | Prepare installation template
  ansible.builtin.template:
    src: "dbca-create-db.rsp.{{ db_version }}.j2"
    dest: "{{ oracle_rsp_stage }}/{{ _oradb_manage_db_oracle_dbca_rsp }}"
    owner: "{{ oracle_user }}"
    group: "{{ oracle_group }}"
    mode: 0660
  vars:
    # loop_var dbh was replaced by odb in outer loop
    # => no need to change all dbca-templates...
    dbh: "{{ odb }}"
  run_once: "{{ _oraswgi_meta_configure_cluster }}"
  when: odb.state == 'present'
  tags:
    - create_db
    - dbcatemplate
    - molecule-idempotence-notest

# show debug task for environments with display_skipped_hosts = false
- name: manage_db | Start create/manage database
  ansible.builtin.debug:
    msg: "Executing ansible_oracle.oracle_db. This takes some time..."
  when: odb.state == 'present'

- name: manage_db | create/manage database
  tags:
    - molecule-idempotence-notest
    - create_db
    - manage_db
    - dbca
  block:
    - name: manage_db | create/manage database
      opitzconsulting.ansible_oracle.oracle_db:
        oracle_home: "{{ _oracle_home_db }}"
        port: "{{ listener_port_template }}"
        sys_password: "{{ _oradb_manage_db_dbca_sys_pass }}"
        db_name: "{{ odb.oracle_db_name }}"
        db_unique_name: "{{ odb.oracle_db_unique_name | default(omit) }}"
        sid: "{{ odb.oracle_db_instance_name | default(omit) }}"
        responsefile: "{{ oracle_rsp_stage }}/{{ _oradb_manage_db_oracle_dbca_rsp }}"
        archivelog: "{{ odb.archivelog | default(omit) }}"
        flashback: "{{ odb.flashback | default(omit) }}"
        force_logging: "{{ odb.force_logging | default(omit) }}"
        initparams: "{{ _oradb_manage_db_init_params_list | default(omit) }}"
        output: verbose
        state: "{{ odb.state }}"
      run_once: "{{ _oraswgi_meta_configure_cluster }}"
      become: true
      become_user: "{{ oracle_user }}"
      when: odb.state == 'present'
      register: dbca_create

  rescue:
    - name: manage_db | fail create/manage database
      ansible.builtin.fail:
        msg: >-
          Set oradb_facts_ignore_unreachable=false in oracle_databases
          to disable this fail task.qq
      when:
        - not _odb_loop_helper.oradb_facts_ignore_unreachable | default(false)

- name: manage_db | Customize oratab for autostart
  ansible.builtin.lineinfile:
    dest: /etc/oratab
    line: "{{ odb.oracle_db_instance_name | default(odb.oracle_db_name) }}:{{ _oracle_home_db }}:Y"
    state: present
  when: autostartup_service and not olrloc.stat.exists and odb.state == 'present'
  tags: update_oratab

- name: manage_db | Customize oratab for autostart
  ansible.builtin.lineinfile:
    dest: /etc/oratab
    line: "{{ odb.oracle_db_instance_name | default(odb.oracle_db_name) }}:{{ _oracle_home_db }}:N"
    state: absent
  when: autostartup_service and not olrloc.stat.exists and odb.state == 'present'
  become: true
  tags: update_oratab

- ansible.builtin.debug:
    msg: "Removing DB - {{ odb.oracle_db_name }}, ORACLE_HOME - {{ _oracle_home_db }}"  # noqa name[missing]
  run_once: "{{ _oraswgi_meta_configure_cluster }}"
  when: odb.state == 'absent'

- name: manage_db | remove database
  opitzconsulting.ansible_oracle.oracle_db:
    oracle_home: "{{ _oracle_home_db }}"
    port: "{{ listener_port_template }}"
    sys_password: "{{ _oradb_manage_db_dbca_sys_pass }}"
    system_password: "{{ _oradb_manage_db_dbca_system_pass }}"
    db_name: "{{ odb.oracle_db_name }}"
    output: verbose
    state: "{{ odb.state }}"
  run_once: "{{ _oraswgi_meta_configure_cluster }}"
  become: true
  become_user: "{{ oracle_user }}"
  when: odb.state == 'absent'
  register: dbca_remove
  tags: remove_db,dbca

- ansible.builtin.debug:
    var: dbca_remove.stdout_lines  # noqa name[missing] no-handler
  when: dbca_remove.changed

- name: manage_db | remove dotprofile
  ansible.builtin.file:
    path: "{{ oracle_user_home }}/.profile_{{ odb.oracle_db_name }}"
    state: absent
  when: odb.state == 'absent'
  tags: create_cdb,dotprofile_db
