---
- name: gi_opatch | check if GI has been configured
  ansible.builtin.stat:
    path: /etc/oracle/olr.loc
  register: olrloc

- name: gi_opatch | set fact for patch_before_rootsh
  ansible.builtin.set_fact:
    patch_before_rootsh: false
  when: olrloc.stat.exists and patch_before_rootsh

- name: gi_opatch | Create patch-base directory (version specific)
  ansible.builtin.file:
    dest: "{{ oracle_patch_stage }}/{{ oracle_install_version_gi }}"
    mode: "0775"
    owner: "{{ _grid_install_user }}"
    group: "{{ oracle_group }}"
    state: directory
  tags:
    - directories

- name: include transfer-files.yml
  ansible.builtin.include_tasks: transfer-files.yml
  when: oracle_sw_copy

- name: include unpack-files.yml
  ansible.builtin.include_tasks: unpack-files.yml
  when: oracle_sw_unpack and apply_patches_gi

- name: include opatch-upgrade.yml
  ansible.builtin.include_tasks: opatch-upgrade.yml
  when: apply_patches_gi

- name: gi_opatch | Check current opatch version
  opitzconsulting.ansible_oracle.oracle_opatch:
    oracle_home: "{{ oracle_home_gi }}"
    state: opatchversion
  register: current_opatch_version
  tags: current_opatch_version

- name: gi_opatch | Configure ocm.rsp (1)
  when:
    - apply_patches_gi
    - current_opatch_version is defined
    - current_opatch_version.msg is version_compare('12.2.0.1.5', '<')
  block:
    - name: gi_opatch | Configure ocm.rsp (1)
      ansible.builtin.template:
        src: ocmrsp.expect.j2
        dest: "{{ oracle_patch_stage }}/{{ oracle_install_version_gi }}/ocmrsp.expect"
        mode: "0777"
        force: true
      become: true
      become_user: "{{ _grid_install_user }}"
      tags:
        - ocmconfig

    - name: gi_opatch | Configure ocm.rsp (2)
      ansible.builtin.shell: "{{ oracle_patch_stage }}/{{ oracle_install_version_gi }}/ocmrsp.expect"
      # noqa command-instead-of-shell
      become: true
      become_user: "{{ _grid_install_user }}"
      changed_when: false
      tags:
        - ocmconfig

- name: gi_opatch | Manage opatchauto patches for GI (after software only install)
  opitzconsulting.ansible_oracle.oracle_opatch:
    oracle_home: "{{ oracle_home_gi }}"
    patch_base: "{{ oracle_patch_install }}/{{ oracle_install_version_gi }}/{{ item.0.path | default (item.0.patchid) }}/{{ item.1 }}"
    patch_id: "{{ item.1 }}"
    patch_version: "{{ item.1.patchversion | default(omit) }}"
    opatchauto: false
    conflict_check: true
    ocm_response_file: "{{ _oraswgi_manage_patches_ocm_response_file | default(omit) }}"
    output: verbose
    state: "{{ item.0.state }}"
  with_subelements:
    - "{{ gi_patches[oracle_install_version_gi]['opatchauto'] }}"
    - subpatches
  # run_once: "{{ _oraswgi_meta_configure_cluster }}"
  become: true
  become_user: "{{ _grid_install_user }}"
  tags:
    - apply_psu_grid
  when:
    - apply_patches_gi
    - gi_patches is defined
    - gi_patches[oracle_install_version_gi] is defined
    - gi_patches[oracle_install_version_gi]['opatchauto'] is defined
    - patch_before_rootsh
    - not olrloc.stat.exists
  register: psuapplym

- name: gi_opatch | Manage opatchauto patches for GI
  opitzconsulting.ansible_oracle.oracle_opatch:
    oracle_home: "{{ oracle_home_gi }}"
    patch_base: "{{ oracle_patch_install }}/{{ oracle_install_version_gi }}/{{ item.path | default(item.patchid) }}/"
    patch_id: "{{ item.patchid }}"
    patch_version: "{{ item.patchversion | default(omit) }}"
    opatchauto: true
    rolling: "{{ item.rolling | default(True) }}"
    conflict_check: true
    ocm_response_file: "{{ _oraswgi_manage_patches_ocm_response_file | default(omit) }}"
    output: verbose
    state: "{{ item.state }}"
  with_items:
    - "{{ gi_patches[oracle_install_version_gi]['opatchauto'] }}"
  # run_once: "{{ _oraswgi_meta_configure_cluster }}"
  tags:
    - apply_psu_grid
  when:
    - apply_patches_gi
    - gi_patches is defined
    - gi_patches[oracle_install_version_gi] is defined
    - gi_patches[oracle_install_version_gi]['opatchauto'] is defined
    - not patch_before_rootsh
    - olrloc.stat.exists
  register: psuapplym

- name: gi_opatch | Manage non opatchauto patches for GI
  opitzconsulting.ansible_oracle.oracle_opatch:
    oracle_home: "{{ oracle_home_gi }}"
    patch_base: "{{ oracle_patch_install }}/{{ oracle_install_version_gi }}/{{ item.path | default(item.patchid) }}/"
    patch_id: "{{ item.patchid }}"
    patch_version: "{{ item.patchversion | default(omit) }}"
    opatchauto: false
    conflict_check: true
    ocm_response_file: "{{ _oraswgi_manage_patches_ocm_response_file | default(omit) }}"
    output: verbose
    state: "{{ item.state }}"
  with_items:
    - "{{ gi_patches[oracle_install_version_gi]['opatch'] }}"
  # run_once: "{{ _oraswgi_meta_configure_cluster }}"
  become: true
  become_user: "{{ _grid_install_user }}"
  tags:
    - apply_psu_grid
  when:
    - apply_patches_gi | bool
    - gi_patches is defined
    - gi_patches[oracle_install_version_gi] is defined
    - gi_patches[oracle_install_version_gi]['opatch'] is defined
    - patch_before_rootsh
    - not olrloc.stat.exists
  register: psuapplym
