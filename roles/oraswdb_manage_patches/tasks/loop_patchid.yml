---
- name: loop_Patchid | Work on Patch {{ dhc_opatch.patchid }}
  ansible.builtin.debug:
    msg:
      - >-
          name: {{ dbh.home }}
          home: {{ db_homes_config[dbh.home]['oracle_home'] | default('') }}
      - >-
          patchid: {{ dhc_opatch.patchid }}
          state: {{ dhc_opatch.state }}
      - >-
          stop_processes: {{ dhc_opatch.stop_processes | default('') }}
          opatch os user: {{ __opatchauto_patchtype | ternary('root', oracle_user) }}
          opatchauto: {{ __opatchauto_patchtype }}
      - >-
          excludeUPI: {{ dhc_opatch.excludeUPI | default('') }}
      - >-
          oracle_patch_stage: {{ oracle_patch_stage }}
          oracle_sw_copy: {{ oracle_sw_copy | bool }}
          is_sw_source_local: {{ is_sw_source_local | bool }}

# - name: loop_Patchid | debug data
#   ansible.builtin.debug:
#     msg:
#       - "{{ oracle_sw_patches | selectattr('patchid', 'equalto', dhc_opatch.patchid) }}"
#       - "{{ dhc_opatch.patchid }}"

# Refresh opatch inventory in ansible before next apply
# but after a rollback in loop before
- name: Refresh opatch inventory after opatch rollback
  when:
    - dhc_opatch.state == 'present'
    - _refresh_opatch_inv_before_apply | default(false)
  ansible.builtin.include_tasks: opatch_lsinv.yml

- name: Set state for opatch inventory refresh before next apply
  ansible.builtin.set_fact:
    _refresh_opatch_inv_before_apply: true
  when:
    - dhc_opatch.state == 'absent'

- name: loop_Patchid | Work on oracle_sw_patches
  ansible.builtin.include_tasks: loop_opatch_apply.yml
  vars:
    __sw_patches_filename_creates: "{{ osp_loop.creates | default((dhc_opatch.patchid | string) + '/README.txt') }}"
    __patch_unarchive_dir: "{{ oracle_patch_stage }}/{{ db_version }}/{{ __patch_upisubdir }}/"
    __patch_upisubdir: >-
      {{ osp_loop.unique_patchid is defined
          | ternary(osp_loop.unique_patchid,
                    osp_loop.patchid) }}/
  with_items:
    - "{{ oracle_sw_patches | selectattr('patchid', 'equalto', dhc_opatch.patchid) }}"
  loop_control:
    loop_var: osp_loop
    label: >-
      patchid: {{ osp_loop.patchid }}
      filename: {{ osp_loop.filename }}
      unique_patchid: {{ osp_loop.unique_patchid | default('') }}
  when:
    - apply_patches_db
    - dhc_opatch.state == 'present'
    - not dbhome_patches.stdout_lines | select('match', osp_loop.patchid | string) | length > 0
    - osp_loop.unique_patchid | default(0) == dhc_opatch.excludeUPI | default(0)

- name: loop_Patchid | Info
  ansible.builtin.debug:
    msg: Starting opatch apply. This could take some time to complete...

# opatchauto needs root user for execution
- name: loop_Patchid | Manage patch for DB
  opitzconsulting.ansible_oracle.oracle_opatch:
    oracle_home: "{{ oracle_home_db }}"
    patch_base: >-
      {{ oracle_patch_install }}/{{ db_version }}/{{ dhc_opatch.path | default(__patch_localsubdir) }}
    patch_id: "{{ dhc_opatch.patchid }}"
    patch_version: "{{ dhc_opatch.patchversion | default(omit) }}"
    exclude_upi: "{{ dhc_opatch.excludeUPI | default(omit) }}"
    opatchauto: "{{ __opatchauto_patchtype }}"
    conflict_check: true
    stop_processes: "{{ dhc_opatch.stop_processes | default(False) }}"
    ocm_response_file: "{{ ocm_response_file | default(omit) }}"
    output: verbose
    state: "{{ dhc_opatch.state }}"
  become: true
  become_user: "{{ __opatchauto_patchtype | ternary('root', oracle_user) }}"
  register: _oracle_opatch_res
  vars:
    __patch_localsubdir: >-
      {{ dhc_opatch.excludeUPI | default(dhc_opatch.patchid) }}/{{ dhc_opatch.patchid | string }}
  when:
    - (
        dhc_opatch.state == 'absent'
      or
        (
          dhc_opatch.state == 'present'
          and not dbhome_patches.stdout_lines | select('match', dhc_opatch.patchid | string) | length > 0
        )
      )

# opatch rollback + opatch apply with same patchid but different unique_id possible
# => we need to refresh our inventory in ansible to reflect the changed situation in opathch inventory
# => Refresh only after 'absent' when next loop item is 'present'
#    Prevent lots of refreshes, when multiple patches are removed!
- name: Set state for opatch inventory refresh before next apply
  ansible.builtin.set_fact:
    _refresh_opatch_inv_before_apply: true
  when:
    - dhc_opatch.state == 'absent'
    - _oracle_opatch_res.changed
