---
- ansible.builtin.set_fact:  # noqa name[missing]
    oracle_home_db: "{%- if db_homes_config[dbh.home]['oracle_home'] is defined -%}\
                        {{ db_homes_config[dbh.home]['oracle_home'] }}\
                    {%- else -%}\
                          {{ oracle_base }}/{{ db_homes_config[dbh.home]['version'] }}/{{ db_homes_config[dbh.home]['home'] }}\
                    {%- endif -%}"

- ansible.builtin.debug:  # noqa name[missing]
    msg: "Managing patches for {{ oracle_home_db }}"
  when: apply_patches_db

- name: Transfer files
  ansible.builtin.include_tasks: transfer-files.yml
  when: oracle_sw_copy

- name: Unpack uploaded files
  ansible.builtin.include_tasks: unpack-files.yml
  when: oracle_sw_unpack and apply_patches_db

- name: Upgrade OPatch
  ansible.builtin.include_tasks: opatch-upgrade.yml
  when: apply_patches_db

- name: db_opatch | Configure ocm.rsp (1)
  ansible.builtin.template:
    src: ocmrsp.expect.j2
    dest: "={{ oracle_patch_stage }}/{{ db_version }}/ocmrsp.expect"
    mode: "0777"
    force: true
  when: apply_patches_db and current_opatch_version.msg is version_compare('12.2.0.1.5', '<')
  become: true
  become_user: "{{ oracle_user }}"
  tags:
    - ocmconfig

- name: db_opatch | Configure ocm.rsp (2)
  ansible.builtin.shell: "{{ oracle_patch_stage }}/{{ db_version }}/ocmrsp.expect"
  # noqa command-instead-of-shell
  when: apply_patches_db and current_opatch_version.msg is version_compare('12.2.0.1.5', '<')
  become: true
  become_user: "{{ oracle_user }}"
  changed_when: false
  tags:
    - ocmconfig

- name: db_opatch | Remove unwanted patches from DB
  opitzconsulting.ansible_oracle.oracle_opatch:
    oracle_home: "{{ oracle_home_db }}"
    patch_base: "{{ oracle_patch_install }}/{{ db_version }}/{{ item.path | default(item.patchid) }}/"
    patch_id: "{{ item.patchid }}"
    patch_version: "{{ item.patchversion | default(omit) }}"
    exclude_upi: "{{ item.excludeUPI | default(omit) }}"
    opatchauto: false
    conflict_check: true
    stop_processes: "{{ item.stop_processes | default(False) }}"
    ocm_response_file: "{{ ocm_response_file | default(omit) }}"
    output: verbose
    state: "{{ item.state }}"
  with_items:
    - "{{ db_homes_config[dbh.home]['opatch'] }}"
  become: true
  become_user: "{{ oracle_user }}"
  tags:
    - apply_patch_db
  when:
    - apply_patches_db | bool
    - db_homes_config[dbh.home]['opatch'] is defined
    - item.state == "absent"
  register: psuapplym

- name: db_opatch | Manage opatchauto patches for DB (non-gi)
  opitzconsulting.ansible_oracle.oracle_opatch:
    oracle_home: "{{ oracle_home_db }}"
    patch_base: "{{ oracle_patch_install }}/{{ db_version }}/{{ item.0.path | default (item.0.patchid) }}/{{ item.1 }}"
    patch_id: "{{ item.1 }}"
    patch_version: "{{ item.1.patchversion | default(omit) }}"
    opatchauto: false
    conflict_check: true
    ocm_response_file: "{{ ocm_response_file | default(omit) }}"
    output: verbose
    state: "{{ item.0.state }}"
  with_subelements:
    - "{{ db_homes_config[dbh.home]['opatchauto'] }}"
    - subpatches
    - flags:
      skip_missing: true
  # run_once: "{{ configure_cluster}}"
  become: true
  become_user: "{{ oracle_user }}"
  tags:
    - apply_patch_db
  when: apply_patches_db and db_homes_config[dbh.home]['opatchauto'] is defined and item.1 is defined and not olrloc.stat.exists
  register: psuapplym

- name: db_opatch | Manage opatchauto patches for DB (gi)
  opitzconsulting.ansible_oracle.oracle_opatch:
    oracle_home: "{{ oracle_home_db }}"
    patch_base: "{{ oracle_patch_install }}/{{ db_version }}/{{ item.path | default(item.patchid) }}/"
    patch_id: "{{ item.patchid }}"
    patch_version: "{{ item.patchversion | default(omit) }}"
    opatchauto: true
    conflict_check: true
    ocm_response_file: "{{ ocm_response_file | default(omit) }}"
    output: verbose
    state: "{{ item.state }}"
  with_items:
    - "{{ db_homes_config[dbh.home]['opatchauto'] }}"
  # run_once: "{{ configure_cluster}}"
  become: true
  tags:
    - apply_patch_db
  when: apply_patches_db and db_homes_config[dbh.home]['opatchauto'] is defined and olrloc.stat.exists
  register: psuapplym

- name: db_opatch | Manage patches for DB
  opitzconsulting.ansible_oracle.oracle_opatch:
    oracle_home: "{{ oracle_home_db }}"
    patch_base: "{{ oracle_patch_install }}/{{ db_version }}/{{ item.path | default(item.patchid) }}/"
    patch_id: "{{ item.patchid }}"
    patch_version: "{{ item.patchversion | default(omit) }}"
    exclude_upi: "{{ item.excludeUPI | default(omit) }}"
    opatchauto: false
    conflict_check: true
    stop_processes: "{{ item.stop_processes | default(False) }}"
    ocm_response_file: "{{ ocm_response_file | default(omit) }}"
    output: verbose
    state: "{{ item.state }}"
  with_items:
    - "{{ db_homes_config[dbh.home]['opatch'] }}"
  # run_once: "{{ configure_cluster }}"
  become: true
  become_user: "{{ oracle_user }}"
  tags:
    - apply_patch_db
  when: apply_patches_db and db_homes_config[dbh.home]['opatch'] is defined
  register: psuapplym

- name: db_opatch | Check patches
  ansible.builtin.shell: "{{ oracle_home_db }}/OPatch/opatch lspatches -oh {{ oracle_home_db }}"
  # noqa command-instead-of-shell
  become: true
  become_user: "{{ oracle_user }}"
  changed_when: false
  register: dbhome_patches

- name: db_opatch | Check patches
  ansible.builtin.debug:
    var: dbhome_patches.stdout_lines
