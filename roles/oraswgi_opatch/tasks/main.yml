---

- name: Check which GI patches are applied
  ansible.builtin.shell: "{{ oracle_home_gi }}/OPatch/opatch lspatches -oh {{ oracle_home_gi }}  |grep  {{ item.patchversion }} |wc -l"
  # noqa risky-shell-pipe
  become: true
  become_user: "{{ grid_install_user }}"
  with_items: "{{ oracle_sw_patches }}"
  tags: check_applied_gi_patches
  when: oracle_psu_apply_gi and item.version == oracle_install_version_gi
  register: gi_applied_patches


- name: Create stage directory
  ansible.builtin.file:
    dest: "{{ oracle_psu_stage }}/{{ oracle_install_version_gi }}"
    mode: "0775"
    owner: "{{ grid_install_user }}"
    group: "{{ oracle_group }}"
    state: directory
  # file: dest={{ oracle_psu_stage }}/{{ oracle_install_version_gi }} mode=775 owner=grid group={{ oracle_group }} state=directory
  tags:
    - directoriespsu
  when: oracle_psu_apply_gi

# - name: Copy oracle GI patchfiles to server (www)
#   get_url: url={{ oracle_sw_source_www }}/{{ item.0.filename }} dest={{ oracle_stage }} mode=775
#   with_together:
#      - oracle_sw_patches
#      - gi_applied_patches.results
#   when: oracle_psu_apply_gi and "{{ item.0.version }}" == "{{ oracle_install_version_gi }}" and not {{ item.1.stdout }} != 0
#   become: yes
#   become_user: "{{ grid_install_user }}"
#   tags:
#     - oragridpatchget
#
# - name: Copy oracle opatch to server (www)
#   get_url: url={{ oracle_sw_source_www }}/{{ item.filename }} dest={{ oracle_stage }} mode=775 force=yes
#   with_items: oracle_opatch_patch
#   when: oracle_psu_apply_gi and "{{ item.version }}" == "{{ oracle_install_version_gi }}"
#   become: yes
#   become_user: "{{ grid_install_user }}"
#   tags:
#     - oragridopatchget


- name: Extract OPatch to stage-area
  ansible.builtin.unarchive:
    src: "{{ oracle_stage }}/{{ item.filename }}"
    dest: "{{ oracle_psu_stage }}/{{ oracle_install_version_gi }}"
    copy: false
  become: true
  become_user: "{{ grid_install_user }}"
  with_items: "{{ oracle_opatch_patch }}"
  when: oracle_psu_apply_gi and item.version == oracle_install_version_gi and oracle_sw_copy and oracle_sw_unpack
  tags:
    - oragridpatchunpack

- name: Extract Opatch to stage-area (from remote location)
  ansible.builtin.unarchive:
    src: "{{ oracle_stage_remote }}/{{ item.filename }}"
    dest: "{{ oracle_psu_stage }}/{{ oracle_install_version_gi }}"
    copy: false
  with_items: "{{ oracle_opatch_patch }}"
  become: true
  become_user: "{{ grid_install_user }}"
  when: oracle_psu_apply_gi and item.version == oracle_install_version_gi and not oracle_sw_copy and oracle_sw_unpack
  tags:
    - oragridpatchunpack


- name: Extract GI psu files to stage-area
  ansible.builtin.unarchive:
    src: "{{ oracle_stage }}/{{ item.0.filename }}"
    dest: "{{ oracle_psu_stage }}/{{ oracle_install_version_gi }}"
    copy: false
  become: true
  become_user: "{{ grid_install_user }}"
  with_together:
    - "{{ oracle_sw_patches }}"
    - "{{ gi_applied_patches.results }}"
  when: oracle_psu_apply_gi and item.0.version == oracle_install_version_gi and not item.1.stdout != 0 and oracle_sw_copy and oracle_sw_unpack
  tags:
    - oragridpsuunpack

- name: Extract GI psu files to stage-area (from remote location)
  ansible.builtin.unarchive:
    src: "{{ oracle_stage_remote }}/{{ item.0.filename }}"
    dest: "{{ oracle_psu_stage }}/{{ oracle_install_version_gi }}"
    copy: false
  become: true
  become_user: "{{ grid_install_user }}"
  with_together:
    - "{{ oracle_sw_patches }}"
    - "{{ gi_applied_patches.results }}"
  when: oracle_psu_apply_gi and item.0.version == oracle_install_version_gi and not oracle_sw_copy and oracle_sw_unpack  # and not item.1.stdout != 0
  tags:
    - oragridpsuunpack


#  - name: Extract files to stage-area (GI) (from remote location)
#    unarchive: src={{ oracle_stage_remote }}/{{ item.0.filename }}  dest={{ oracle_psu_stage }}/{{ item.0.version }} copy=no
#    with_together:
#       - oracle_sw_patches
#       - gi_applied_patches.results
#    become: yes
#    become_user: "{{ grid_install_user }}"
#    tags:
#    - oragridswunpack
#    when: checkgiinstall.stdout != "1" and "{{ oracle_install_version_gi }}" == "{{ item.version }}" and not oracle_sw_copy and oracle_sw_unpack

- name: Distribute latest opatch
  ansible.builtin.shell: rm -rf {{ oracle_home_gi }}/OPatch; cp -Rvp {{ oracle_psu_stage }}/{{ oracle_install_version_gi }}/OPatch {{ oracle_home_gi }}; chown -R {{ grid_install_user }}:{{ oracle_group }} {{ oracle_home_gi }}/OPatch
  # noqa yaml deprecated-command-syntax
  when: oracle_psu_apply_gi
  tags:
    - oragridnewopatch

- name: Apply PSU to GI (v12.x) (Master node)
  ansible.builtin.shell: "{{ oracle_home_gi }}/OPatch/opatchauto apply {{ oracle_psu_stage }}/{{ oracle_install_version_gi }}/{{ item.0.patchid }} -oh {{ oracle_home_gi }}"  # -ocmrf {{ oracle_psu_stage }}/{{ oracle_install_version_gi }}/ocm.rsp "
  # noqa yaml command-instead-of-shell
  with_together:
    - "{{ oracle_sw_patches }}"
    - "{{ gi_applied_patches.results }}"
  run_once: "{{ configure_cluster }}"
  tags:
    - apply_psu_grid
  when:
    - oracle_psu_apply_gi
    - (12.1 in oracle_install_version_gi or 12.2 in oracle_install_version_gi)
    - item.0.version == oracle_install_version_gi
  register: psuapplym


- name: Apply PSU to GI (v11.2) (Master node)
  ansible.builtin.shell: "{{ oracle_home_gi }}/OPatch/opatch auto {{ oracle_psu_stage }}/{{ oracle_install_version_gi }}/{{ item.0.patchid }} -oh {{ oracle_home_gi }} -ocmrf {{ oracle_psu_stage }}/{{ oracle_install_version_gi }}/ocm.rsp "
  # noqa yaml command-instead-of-shell
  with_together:
    - "{{ oracle_sw_patches }}"
    - "{{ gi_applied_patches.results }}"
  run_once: "{{ configure_cluster }}"
  tags: apply_psu_grid
  when: oracle_psu_apply_gi and '11.2' in oracle_install_version_gi and item.0.version == oracle_install_version_gi and not item.1.stdout != 0
  register: psuapplym

- ansible.builtin.debug:  # noqa name[missing]
    var: psuapplym.stdout_lines
  run_once: "{{ configure_cluster }}"
  when: oracle_psu_apply_gi
  tags:
    - psuapplym

- name: Check if stuff is running
  ansible.builtin.shell: "{{ oracle_home_gi }}/bin/crsctl stat res -t"
  # noqa command-instead-of-shell
  run_once: "{{ configure_cluster }}"
  tags:
    - crsctl
  register: crsctl
  when: oracle_psu_apply_gi  # and not {{ item.1.stdout }} != 0

- ansible.builtin.debug:  # noqa name[missing]
    var: crsctl.stdout_lines
  tags:
    - crsctl
  run_once: "{{ configure_cluster }}"
  # when: master_node

- name: Apply PSU to GI (v12.1) (other nodes)
  ansible.builtin.shell: "{{ oracle_home_gi }}/OPatch/opatchauto apply {{ oracle_psu_stage }}/{{ oracle_install_version_gi }}/{{ item.0.patchid }} -oh {{ oracle_home_gi }} -ocmrf {{ oracle_psu_stage }}/{{ oracle_install_version_gi }}/ocm.rsp "
  # noqa yaml command-instead-of-shell
  with_together:
    - "{{ oracle_sw_patches }}"
    - "{{ gi_applied_patches.results }}"
  tags:
    - apply_psu_grid
  when:
    - configure_cluster
    - inventory_hostname != cluster_master
    - oracle_psu_apply_gi
    - 12.1 in oracle_install_version_gi
    - item.0.version == oracle_install_version_gi
    - not item.1.stdout != 0
  register: psuapplyo

- name: Apply PSU to GI (v11.2) (other nodes)
  ansible.builtin.shell: "{{ oracle_home_gi }}/OPatch/opatch auto {{ oracle_psu_stage }}/{{ oracle_install_version_gi }}/{{ item.0.patchid }} -oh {{ oracle_home_gi }} -ocmrf {{ oracle_psu_stage }}/{{ oracle_install_version_gi }}/ocm.rsp "
  # noqa yaml command-instead-of-shell
  with_together:
    - "{{ oracle_sw_patches }}"
    - "{{ gi_applied_patches.results }}"
  tags: apply_psu_grid
  when:
    - configure_cluster
    - inventory_hostname != cluster_master
    - oracle_psu_apply_gi
    - 11.2 in oracle_install_version_gi
    - item.0.version == oracle_install_version_gi
    - not item.1.stdout != 0
  register: psuapplyo

- ansible.builtin.debug:  # noqa name[missing]
    var: psuapplyo.stdout_lines
  when: configure_cluster and inventory_hostname != cluster_master and oracle_psu_apply_gi and psuapplyo is defined
  tags:
    - psuapplyo

- name: Check if stuff is running
  ansible.builtin.shell: "{{ oracle_home_gi }}/bin/crsctl stat res -t"
  # noqa yaml command-instead-of-shell
  tags:
    - crsctl-opatch
  register: crsctl
  when: oracle_psu_apply_gi

- ansible.builtin.debug:  # # noqa name[missing]
    var: crsctl.stdout_lines
  tags:
    - crsctl-opatch
  when: oracle_psu_apply_gi

- name: Check opatch lsinventory
  ansible.builtin.shell: "{{ oracle_home_gi }}/OPatch/opatch lsinventory"
  # noqa yaml command-instead-of-shell
  become: true
  become_user: "{{ grid_install_user }}"
  register: opatchls
  when: oracle_psu_apply_gi
  tags:
    - opatchls

- ansible.builtin.debug:  # noqa name[missing]
    var: opatchls.stdout_lines
  when: oracle_psu_apply_gi
  tags:
    - opatchls
