---

- name: install_home_gi | Extract files to stage-area (GI)
  ansible.builtin.unarchive:
    src: "{{ oracle_stage }}/{{ item.filename }}"
    dest: "{{ oracle_stage }}/{{ item.version }}"
    copy: false
    creates: "{{ oracle_stage }}/{{ item.version }}/{{ item.creates }}"
  with_items: "{{ oracle_sw_image_gi }}"
  become: true
  become_user: "{{ grid_install_user }}"
  tags:
    - oragridswunpack
  when: oracle_home_gi not in checkgiinstall.stdout and oracle_install_version_gi == item.version and oracle_sw_copy and oracle_sw_unpack

- name: install_home_gi | Extract files to stage-area (GI) (from remote location)
  ansible.builtin.unarchive:
    src: "{{ oracle_stage_remote }}/{{ item.filename }}"
    dest: "{{ oracle_stage }}/{{ item.version }}"
    copy: false
    creates: "{{ oracle_stage }}/{{ item.version }}/{{ item.creates }}"
  with_items: "{{ oracle_sw_image_gi }}"
  become: true
  become_user: "{{ grid_install_user }}"
  tags:
    - oragridswunpack
  when: oracle_home_gi not in checkgiinstall.stdout and oracle_install_version_gi == item.version and not oracle_sw_copy and oracle_sw_unpack

- name: install_home_gi | Install cvuqdisk rpm
  ansible.builtin.yum:
    name: "{{ oracle_stage_install }}/{{ oracle_install_version_gi }}/grid/rpm/{{ cvuqdisk_rpm }}"
    state: present
  # noqa ignore-errors
  when: configure_cluster
  tags: cvuqdisk
  ignore_errors: true

- name: install_home_gi | Setup response file for install (GI)
  ansible.builtin.template:
    src: grid-install.rsp.{{ oracle_install_version_gi }}.j2
    dest: "{{ oracle_rsp_stage }}/{{ oracle_grid_responsefile }}"
    owner: "{{ grid_install_user }}"
    group: "{{ oracle_group }}"
    mode: "0600"
    backup: true
  with_items: "{{ asm_diskgroups }}"
  run_once: "{{ configure_cluster }}"
  tags:
    - responsefilegi
  when: oracle_home_gi not in checkgiinstall.stdout and item.diskgroup == oracle_asm_init_dg

- name: install_home_gi | Install Grid Infrastructure
  ansible.builtin.shell: "{{ oracle_stage_install }}/{{ oracle_install_version_gi }}/grid/runInstaller -responseFile {{ oracle_rsp_stage }}/{{ oracle_grid_responsefile }} -waitforcompletion -ignorePrereq -ignoreSysPrereqs -showProgress -silent"
  # noqa yaml command-instead-of-shell
  become: true
  become_user: "{{ grid_install_user }}"
  run_once: "{{ configure_cluster }}"
  tags:
    - oragridinstall
  when: oracle_home_gi not in checkgiinstall.stdout  # and oracle_sw_unpack
  register: giinstall

- ansible.builtin.debug:  # noqa name[missing]
    var: giinstall.stdout_lines
  run_once: "{{ configure_cluster }}"
  when: oracle_home_gi not in checkgiinstall.stdout

- ansible.builtin.include_role:
    # noqa name[missing]
    name: oraswgi_manage_patches
  when: patch_before_rootsh and apply_patches_gi

- name: install_home_gi | Run oraInstroot script after installation
  ansible.builtin.shell: "{{ oracle_inventory_loc }}/orainstRoot.sh"
  # noqa command-instead-of-shell
  become: true
  tags:
    - runroot
  when: oracle_home_gi not in checkgiinstall.stdout

- name: install_home_gi | Run root script after installation (Master Node)
  ansible.builtin.shell: "{{ oracle_home_gi }}/root.sh"
  # noqa command-instead-of-shell
  become: true
  run_once: "{{ configure_cluster }}"
  tags:
    - runroot
  when: oracle_home_gi not in checkgiinstall.stdout
  register: rootmaster

- ansible.builtin.debug:  # noqa name[missing]
    var: rootmaster.stdout_lines
  run_once: "{{ configure_cluster }}"
  when: oracle_home_gi not in checkgiinstall.stdout

- name: install_home_gi | Run root script after installation (Other Nodes)
  ansible.builtin.shell: "sleep {{ item.0 * 60 }}; {{ oracle_home_gi }}/root.sh"
  # noqa command-instead-of-shell
  become: true
  with_indexed_items: "{{ groups[hostgroup] }}"
  tags:
    - runroot
  # when: oracle_home_gi not in checkgiinstall.stdout  and inventory_hostname == item.1
  when: configure_cluster and inventory_hostname != cluster_master and inventory_hostname == item.1 and oracle_home_gi not in checkgiinstall.stdout
  register: rootother

- ansible.builtin.debug:  # noqa name[missing] ignore-errors
    var: rootother.stdout_lines
  # when: not master_node and oracle_home_gi not in checkgiinstall.stdout
  when: configure_cluster and inventory_hostname != cluster_master and oracle_home_gi not in checkgiinstall.stdout
  ignore_errors: true

- name: install_home_gi | Setup response file for configToolAllCommands
  ansible.builtin.template:
    src: "configtoolallcommands.rsp.{{ oracle_install_version_gi }}.j2"
    dest: "{{ oracle_rsp_stage }}/configtoolallcommands.rsp"
    owner: "{{ grid_install_user }}"
    group: "{{ oracle_group }}"
    mode: "0755"
    backup: true
  run_once: "{{ configure_cluster }}"
  tags:
    - responsefileconfigtool
  when: run_configtoolallcommand and oracle_home_gi not in checkgiinstall.stdout

- name: install_home_gi | Run configToolAllCommands
  ansible.builtin.shell: "{{ oracle_home_gi }}/cfgtoollogs/configToolAllCommands RESPONSE_FILE={{ oracle_rsp_stage }}/configtoolallcommands.rsp"
  # noqa command-instead-of-shell
  become: true
  become_user: "{{ grid_install_user }}"
  run_once: "{{ configure_cluster }}"
  tags:
    - runconfigtool
  when: run_configtoolallcommand and oracle_home_gi not in checkgiinstall.stdout
  ignore_errors: true
  register: configtool
