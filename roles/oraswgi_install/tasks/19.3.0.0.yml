---
# IMPORTANT !!!
# This file is shared with 21.3.0.0.yml via symbolic link.
#
- name: install_home_gi
  tags:
    - oragridswunpack
  when:
    - oracle_home_gi not in checkgiinstall.stdout
  block:
    - name: Info
      ansible.builtin.debug:
        msg:
          - "install_home_gi | Start Extract files to ORACLE_HOME (gi)"
          - "oracle_home_gi: {{ oracle_home_gi }}"
      run_once: "{{ _oraswgi_meta_configure_cluster }}"

    - name: install_home_gi | Extract files to ORACLE_HOME (gi)
      ansible.builtin.unarchive:
        src: "{{ _oraswgi_install_oracle_gi_image }}"
        dest: "{{ oracle_home_gi }}"
        copy: false
      with_items: "{{ oracle_sw_image_gi | selectattr('version', 'match', oracle_install_version_gi) }}"
      loop_control:
        label: "{{ _oraswgi_install_oracle_gi_image | default('') }}"
      args:
        creates: "{{ oracle_home_gi }}/root.sh"
      become: true
      become_user: "{{ _grid_install_user }}"
      run_once: "{{ _oraswgi_meta_configure_cluster }}"

    - name: install_home_gi | Copy Patches for -applyRU when version >=19c
      ansible.builtin.import_role:
        name: oraswgi_manage_patches
      when:
        - patch_before_rootsh
        - oracle_home_gi not in checkgiinstall.stdout
        - oracle_install_version_gi is version(19, '>=')

- name: install_home_gi | Check for file GridSetup.sh
  no_log: true
  ansible.builtin.stat:
    path: "{{ oracle_home_gi }}/gridSetup.sh"
  register: stat_gridsetup_result
  run_once: "{{ _oraswgi_meta_configure_cluster }}"
  become: true
  become_user: "{{ _grid_install_user }}"

- name: install_home_gi | State of GridSetup.sh
  ansible.builtin.assert:
    quiet: true
    that: "stat_gridsetup_result.stat.exists == True"
    msg: "Cannot find {{ oracle_home_gi }}/gridSetup.sh }}"
  run_once: "{{ _oraswgi_meta_configure_cluster }}"

- name: check for existing cvuqdisk_rpm
  ansible.builtin.stat:
    path: "{{ oracle_home_gi }}/cv/rpm/{{ cvuqdisk_rpm }}"
  register: statcvuqdisk
  run_once: true
  tags: cvuqdisk

# Oracle Restart + ASMFD
# => cvuqdisk is mandatory
- name: When _oraswgi_meta_configure_cluster
  when:
    - (_oraswgi_meta_configure_cluster and hostvars[cluster_master]['statcvuqdisk']['stat']['exists'])
      or
      (not _oraswgi_meta_configure_cluster and device_persistence == 'asmfd')
  tags: cvuqdisk
  block:

    # synchronize didn't work on all environments...
    # => fetch to ansible controller
    # => copy to nodes
    - name: install_home_gi | copy cvuqdisk to ansible controller
      ansible.builtin.fetch:
        src: "{{ oracle_home_gi }}/cv/rpm/{{ cvuqdisk_rpm }}"
        dest: /tmp
        mode: 0644
      run_once: true
      when:
        - statcvuqdisk.stat.exists
      tags: cvuqdisk

    - name: install_home_gi | copy cvuqdisk to cluster nodes
      ansible.builtin.copy:
        src: "/tmp/{{ cluster_master }}/{{ oracle_home_gi }}/cv/rpm/{{ cvuqdisk_rpm }}"
        dest: "{{ oracle_rsp_stage }}/{{ cvuqdisk_rpm }}"
        mode: 0644
      tags: cvuqdisk

    - name: install_home_gi | Install cvuqdisk rpm
      ansible.builtin.yum:
        name: "{{ oracle_rsp_stage }}/{{ cvuqdisk_rpm }}"
        state: present
        disable_gpg_check: true
      tags: cvuqdisk

- name: install_home_gi | Setup response file for install (GI)
  ansible.builtin.template:
    src: "grid-install.rsp.{{ oracle_install_version_gi }}.j2"
    dest: "{{ oracle_rsp_stage }}/{{ _oraswgi_install_oracle_grid_responsefile }}"
    owner: "{{ _grid_install_user }}"
    group: "{{ oracle_group }}"
    mode: "0600"
    backup: true
  with_items: "{{ asm_diskgroups }}"
  run_once: "{{ _oraswgi_meta_configure_cluster }}"
  loop_control:
    label: "{{ oracle_rsp_stage }}/{{ _oraswgi_install_oracle_grid_responsefile }}"
  tags:
    - responsefilegi
  when:
    - item.diskgroup == oracle_asm_init_dg

- name: install_home_gi | Block for configure Grid Infrastructure
  when: oracle_home_gi not in checkgiinstall.stdout
  vars:
    # get 1st opatchauto patch with state=present
    __applyruopatchauto: |-
      {{ gi_patches[oracle_install_version_gi]['opatchauto']
        | selectattr('state', 'match', 'present') | list | first }}
    __patchru_dir: |-
      {{ oracle_sw_copy | bool | ternary(oracle_stage, oracle_stage_remote) }}/patches/{{ oracle_install_version_gi }}/
      {{- __applyruopatchauto['path'] | default(__applyruopatchauto['patchid']) }}

  block:
    - name: Execute cluvfy
      ansible.builtin.include_tasks: runcluvfy.yml  # noqa name[missing]
      when:
        - force_runcluvfy | default(false) or oracle_home_gi not in checkgiinstall.stdout
      tags: always

    - name: ASM Filter Driver
      ansible.builtin.include_tasks: asmfd.yml
      when:
        - device_persistence == 'asmfd'
      tags:
        - asmfd

    - name: install_home_gi | Check for bundle.xml in patchru_dir
      when:
        - patch_before_rootsh | bool
      block:
        # the ORACLE_HOME is damaged, when gridSetup.sh is started wiith wrong path!
        # => Check for existing file bundle.xml
        - name: install_home_gi | Check for bundle.xml in {{ __patchru_dir }}
          ansible.builtin.stat:
            path: "{{ __patchru_dir }}/bundle.xml"
          register: __patchru_dir_stat

        - name: install_home_gi | Assert for bundle.xml
          ansible.builtin.assert:
            quiet: true
            that:
              - __patchru_dir_stat.stat.exists
            fail_msg: "bundle.xml not found in {{ __patchru_dir }}"

    - name: install_home_gi | Start Install Grid Infrastructure"
      ansible.builtin.debug:
        msg:
          - "oracle_home_gi: {{ oracle_home_gi }}"
          - "apply RU before configuration: {{ patch_before_rootsh }}"
          - "{{ patch_before_rootsh | bool | ternary('patchru_dir: ' + __patchru_dir, '') }}"
      run_once: true

    - name: install_home_gi | Install Grid Infrastructure
      ansible.builtin.command:
        # noqa no-changed-when
        argv: "{{ __argv }}"
      vars:
        __argv: "{{ __argv1 + (patch_before_rootsh | bool | ternary(__argvru, [])) }}"
        __argv1:
          - "{{ oracle_home_gi }}/gridSetup.sh"
          - -responseFile
          - "{{ oracle_rsp_stage }}/{{ _oraswgi_install_oracle_grid_responsefile }}"
          - -waitforcompletion
          - -silent
          - "{{ _oraswgi_install_giignoreprereqparam | default(omit) }}"
        __argvru:
          - -applyRU
          - "{{ __patchru_dir }}"
      become: true
      become_user: "{{ _grid_install_user }}"
      run_once: "{{ _oraswgi_meta_configure_cluster }}"
      tags:
        - oragridinstall
      register: giinstall
      failed_when: giinstall.rc not in [0, 6]

    - name: Info
      ansible.builtin.debug:
        var: giinstall.stdout_lines
      run_once: "{{ _oraswgi_meta_configure_cluster }}"
      when: giinstall.stdout_lines is defined

- name: install_home_gi | include role oraswgi_manage_patches
  ansible.builtin.include_role:
    name: oraswgi_manage_patches
  when: patch_before_rootsh and apply_patches_gi

- name: ""
  when:
    - oracle_home_gi not in checkgiinstall.stdout
  block:  # when: oracle_home_gi not in checkgiinstall.stdout
    - name: install_home_gi | Run oraInstroot script after installation
      ansible.builtin.command: "{{ oracle_inventory_loc }}/orainstRoot.sh"
      # noqa no-changed-when
      become: true
      tags:
        - runroot

    - ansible.builtin.debug:  # noqa name[missing]
        msg: "install_home_gi | Start Run root script after installation (Master Node)"
      run_once: true

    - name: install_home_gi | Run root script after installation (Master Node)
      ansible.builtin.command: "{{ oracle_home_gi }}/root.sh"
      # noqa no-changed-when
      become: true
      run_once: "{{ _oraswgi_meta_configure_cluster }}"
      register: rootmaster
      tags:
        - runroot

    - name: Info
      ansible.builtin.debug:
        var: rootmaster.stdout_lines
      run_once: "{{ _oraswgi_meta_configure_cluster }}"
      when: rootmaster.stdout_lines is defined

    - name: Info
      ansible.builtin.debug:
        msg: "install_home_gi | Start Run root script after installation (Other Nodes)"
      run_once: true

    # do not start root.sh on all nodes in parallel
    # => sleep
    - name: install_home_gi | Run root script after installation (Other Nodes)
      ansible.builtin.shell: |
        sleep {{ item.0 * 60 }}
        {{ oracle_home_gi }}/root.sh
      # noqa no-changed-when
      args:
        executable: /usr/bin/bash
      become: true
      with_indexed_items: "{{ groups[hostgroup] }}"
      tags:
        - runroot
      when:
        - _oraswgi_meta_configure_cluster
        - inventory_hostname != cluster_master
        - inventory_hostname == item.1
      register: rootother

    - name: Info
      ansible.builtin.debug:
        var: rootother.stdout_lines
      when: rootother.stdout_lines is defined

    - name: install_home_gi | Execute ConfigTools
      ansible.builtin.command: "{{ oracle_home_gi }}/gridSetup.sh -executeConfigTools -responseFile {{ oracle_rsp_stage }}/{{ _oraswgi_install_oracle_grid_responsefile }} -silent"
      # noqa no-changed-when
      become: true
      become_user: "{{ _grid_install_user }}"
      run_once: "{{ _oraswgi_meta_configure_cluster }}"
      tags:
        - runconfigtool
      when:
        - run_configtoolallcommand
      ignore_errors: true
      register: configtool
