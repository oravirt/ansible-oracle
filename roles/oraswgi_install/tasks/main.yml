---
- name: install_home_gi | Assert
  ansible.builtin.include_tasks: assert.yml
  tags: always

- name: install_home_gi | Install ocenv from oradb_manage_db
  ansible.builtin.import_role:
    name: oradb_manage_db
    tasks_from: ocenv.yml
    allow_duplicates: false

- name: install_home_gi | Check if GI is already installed
  ansible.builtin.shell: cat "{{ oracle_inventory_loc }}/ContentsXML/inventory.xml" | grep -w {{ oracle_home_gi }} |awk  '{print $3}' | cut -f2 -d'"'
  # noqa command-instead-of-shell no-changed-when risky-shell-pipe
  tags:
    - always
  changed_when: false
  register: checkgiinstall

- name: install_home_gi | check if GI has been configured
  ansible.builtin.stat:
    path: /etc/oracle/olr.loc
  register: olrloc

- name: install_home_gi | State of current installation
  ansible.builtin.debug:
    msg: "GI/Restart installed? {{ olrloc.stat.exists }}"

- name: Assert inventory
  when:
    - not olrloc.stat.exists
  block:
    - name: assert oracle_asm_init_dg in asm_diskgroups
      ansible.builtin.assert:
        quiet: true
        that:
          - oracle_asm_init_dg is defined
          - _oraswgi_install_init_dg_exists

- name: install_home_gi | set fact for patch_before_rootsh
  ansible.builtin.set_fact:
    patch_before_rootsh: false
  when:
    - olrloc.stat.exists
    - patch_before_rootsh | bool

- name: install_home_gi | Mount nfs share with installation media
  ansible.builtin.include_role:
    name: orasw_meta
    tasks_from: mount_stage_remote
  tags:
    - nfsmountdb

- name: install_home_gi | Create common directories
  ansible.builtin.file:
    dest: "{{ item.name }}"
    mode: "{{ item.mode }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    state: directory
  with_items: "{{ _oraswgi_manage_patches_oracle_directories }}"
  tags:
    - directories

- name: install_home_gi | Create stage directory (version specific)
  ansible.builtin.file:
    dest: "{{ oracle_stage }}/{{ item.version }}"
    mode: "0775"
    owner: "{{ oracle_user }}"
    group: "{{ oracle_group }}"
    state: directory
  become: true
  with_items: "{{ oracle_sw_image_gi | selectattr('version', 'equalto', oracle_install_version_gi) }}"
  tags:
    - directories

- name: install_home_gi | Install Grid Infrastructure/Restart include main_install
  ansible.builtin.include_tasks: main_install.yml
  when:
    - not olrloc.stat.exists

- name: include_tasks asmcmd_dsset.yml
  ansible.builtin.include_tasks: asmcmd_dsset.yml
  tags: always

- name: install_home_gi | Check if stuff is running
  ansible.builtin.shell: "{{ oracle_home_gi }}/bin/crsctl stat res -t"
  # noqa command-instead-of-shell no-changed-when
  tags:
    - crsctl
  register: crsctl
  run_once: "{{ _oraswgi_meta_configure_cluster }}"
  when: oracle_home_gi not in checkgiinstall.stdout

- ansible.builtin.debug:  # noqa name[missing]
    var: crsctl.stdout_lines
  tags:
    - crsctl
  run_once: "{{ _oraswgi_meta_configure_cluster }}"
  when: oracle_home_gi not in checkgiinstall.stdout

- name: install_home_gi | Update Nodelist, set CRS=TRUE
  ansible.builtin.shell: "{{ oracle_home_gi }}/oui/bin/runInstaller -updateNodeList ORACLE_HOME={{ oracle_home_gi }} CRS=TRUE"
  # noqa command-instead-of-shell no-changed-when ignore-errors
  become: true
  become_user: "{{ _grid_install_user }}"
  run_once: "{{ _oraswgi_meta_configure_cluster }}"
  when: oracle_home_gi not in checkgiinstall.stdout
  ignore_errors: true
  tags:
    - updatenodelist

- name: install_home_gi | Add additional info to glogin.sql (1)
  ansible.builtin.lineinfile:
    dest: "{{ oracle_home_gi }}/sqlplus/admin/glogin.sql"
    line: 'set sqlprompt "_user @ _connect_identifier:>"'
    backup: true
  tags:
    - glogingi
  when: oracle_home_gi not in checkgiinstall.stdout

- name: install_home_gi | Add additional info to glogin.sql (2)
  ansible.builtin.lineinfile:
    dest: "{{ oracle_home_gi }}/sqlplus/admin/glogin.sql"
    line: 'set time on'
    backup: true
  tags:
    - glogingi
  when: oracle_home_gi not in checkgiinstall.stdout

- name: ansible.builtin.include_role oraswgi_manage_patches
  ansible.builtin.include_role:
    name: oraswgi_manage_patches
  when:
    - not patch_before_rootsh
    - apply_patches_gi

- name: install_home_gi | Check opatch lsinventory (GI)
  ansible.builtin.shell: "{{ oracle_home_gi }}/OPatch/opatch lspatches"
  # noqa command-instead-of-shell no-changed-when
  become: true
  become_user: "{{ _grid_install_user }}"
  environment:
    ORACLE_HOME: "{{ oracle_home_gi }}"
  register: opatchls
  tags:
    - opatchls
  when: oracle_home_gi not in checkgiinstall.stdout

- name: install_home_gi | Check opatch lsinventory (GI)
  ansible.builtin.debug:
    var: opatchls.stdout_lines
  tags:
    - opatchls
  when: oracle_home_gi not in checkgiinstall.stdout

- name: install_home_gi | Check olsnodes (GI)
  ansible.builtin.shell: "{{ oracle_home_gi }}/bin/olsnodes -a -n -s -t"
  # noqa command-instead-of-shell no-changed-when
  become: true
  become_user: "{{ _grid_install_user }}"
  when: oracle_gi_cluster_type | upper == 'FLEX' and '12' in oracle_install_version_gi
  register: olsnodes
  tags:
    - olsnodes

- name: install_home_gi | Check olsnodes (GI)
  ansible.builtin.debug:
    var: olsnodes.stdout_lines
  when: oracle_gi_cluster_type | upper == 'FLEX' and '12' in oracle_install_version_gi
  tags:
    - olsnodes

- name: install_home_gi | Unmount nfs share with installation media
  ansible.builtin.include_role:
    name: orasw_meta
    tasks_from: umount_stage_remote
  tags:
    - nfsumountdb
