
  - name: install-home-db | Mount nfs share with installation media
    mount: src="{{ nfs_server_sw }}:{{ nfs_server_sw_path }}" name={{ oracle_stage_remote }} fstype=nfs state=mounted
    when: install_from_nfs
    tags:
      - nfsmountdb

  - name: install-home-db | Add oraInst.loc
    template: src=oraInst.loc.j2 dest=/etc/oraInst.loc owner={{ oracle_user }} group={{ oracle_group }} mode=644 backup=yes
    tags:
    - orainst

  - name: install-home-db | Create common directories
    file: dest={{ item.name }} mode={{ item.mode}} owner={{ item.owner }} group={{ item.group }} state=directory
    with_items: "{{oracle_directories}}"
    tags:
      - directoriesdb

  - name: install-home-db | Create stage directory (version specific)
    file: dest={{ oracle_stage }}/{{ item.oracle_version_db }} mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory
    with_items:
       - "{{ oracle_databases }}"
    run_once: "{{ configure_cluster}}"
    when: oracle_databases is defined
    tags:
      - directoriesdb

  - name: install-home-db | Create ORACLE_HOME directory
    file: dest={{ oracle_home_db }} mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory
    with_items: "{{oracle_databases}}"
    tags:
      - directoriesdb

  - include_tasks: "{{ www_download_bin }}.yml"
    when: not is_sw_source_local and oracle_sw_copy

  - name: install-home-db | Transfer oracle installfiles to server (local)
    copy: src={{ oracle_sw_source_local }}/{{ item[0].filename }} dest={{ oracle_stage }} mode=775 force=no
    with_nested:
      - "{{oracle_sw_image_db}}"
      - "{{oracle_databases}}"
    become: yes
    become_user: "{{ oracle_user }}"
    run_once: "{{ configure_cluster}}"
    when: item[0].version == item[1].oracle_version_db and is_sw_source_local and oracle_sw_copy
    tags:
      - oradbsw

  - name: install-home-db | Extract files to stage-area
    unarchive:
        src={{ oracle_stage }}/{{ item[0].filename }}
        dest={{ oracle_stage }}/{{ item[0].version }}
        copy=no
        creates="{{ oracle_stage }}/{{ item[0].version }}/{{ item[0].creates}}"
    with_nested:
      - "{{oracle_sw_image_db}}"
      - "{{oracle_databases}}"
    become: yes
    become_user: "{{ oracle_user }}"
    run_once: "{{ configure_cluster}}"
    when: item[0].version == item[1].oracle_version_db and oracle_sw_copy and oracle_sw_unpack
    tags:
      - oradbswunpack

  - name: install-home-db | Extract files to stage-area (from remote location)
    unarchive:
        src={{ oracle_stage_remote }}/{{ item[0].filename }}
        dest={{ oracle_stage }}/{{ item[0].version }}
        copy=no
        creates="{{ oracle_stage }}/{{ item[0].version }}/{{ item[0].creates}}"
    with_nested:
      - "{{oracle_sw_image_db}}"
      - "{{oracle_databases}}"
    become: yes
    become_user: "{{ oracle_user }}"
    run_once: "{{ configure_cluster}}"
    when: item[0].version == item[1].oracle_version_db and not oracle_sw_copy and oracle_sw_unpack
    tags:
      - oradbswunpack

  - include_tasks: install-home-db.yml

  - name: Setup response file for install (DB)
    template: src=db-install.rsp.{{ item.0.oracle_version_db }}.j2 dest={{ oracle_rsp_stage }}/{{ oracle_db_responsefile }}
    with_together:
     - "{{oracle_databases}}"
     - "{{checkdbswinstall.results}}"
    become: yes
    become_user: "{{ oracle_user }}"
    when: master_node #and item.1.stdout != "1"
    tags:
      - responsefileswdb

  - name: Create script to install Database Server
    template: src=run-db-install.sh.j2 dest={{ oracle_rsp_stage }}/{{ oracle_db_run_install }} mode=755
    with_together:
     - "{{oracle_databases}}"
     - "{{checkdbswinstall.results}}"
    become: yes
    become_user: "{{ oracle_user }}"
    when: master_node #and item.1.stdout != "1"
    tags:
      - responsefileswdb

  - name: Install Oracle Database Server
    #shell: "{{ oracle_stage_install }}/{{ item.0.oracle_version_db }}/database/runInstaller -responseFile {{ oracle_rsp_stage }}/{{ oracle_db_responsefile }} -ignorePrereq -ignoreSysPrereqs -silent -waitforcompletion"
    shell: "{{ oracle_rsp_stage }}/{{ oracle_db_run_install }}"
    with_together:
     - "{{oracle_databases}}"
     - "{{checkdbswinstall.results}}"
    become: yes
    become_user: "{{ oracle_user }}"
    when: master_node and item.1.stdout != "1"
    tags:
      - oradbinstall
    register: oradbinstall

  - debug: var=item
    with_items:
        #- "{{ oradbinstall.results }}"
        - "{{ oradbinstall.results|map(attribute='stdout_lines')|list }}"
    when: master_node
    tags:
     - oradbinstall
    ignore_errors: true


#  - name: Run oraInstroot script after installation
#    shell: "{{ oracle_inventory_loc }}/orainstRoot.sh"
#    become: yes
#    become_user: root
#    tags:
#      - runroot

  - name: Run root script after installation
    shell: "{{ oracle_home_db }}/root.sh"
    with_together:
     - "{{oracle_databases}}"
     - "{{checkdbswinstall.results}}"
    when: master_node and item.1.stdout != "1"
    #with_items: oracle_databases
    #when: master_node
    tags:
      - runroot

  # oracle_EE_options = '' => Nothing to do
  - name: set facts for chopt
    no_log: true
    set_fact:
      oracle_databaseschopt: "{{oracle_databaseschopt|default([]) + [ item | combine({'oracle_EE_options': oracle_EE_options})]}}"
    with_items:
     - "{{oracle_databases}}"
    when: oracle_EE_options != ''
    tags:
      - dbchopt

  # licence options in 12.2 must be changed by chopt
  # => use this method for all >= 11.2 (Doc ID 948061.1)
  # test -f => reduce number of executions when > 1 database in oracle_databases
  - name: Change Database options with chopt
    shell: "test -f {{ oracle_home_db }}/install/{{oracle_EE_option_state}}_{{item.1.option}}.log || {{ oracle_home_db }}/bin/chopt {{oracle_EE_option_state}} {{item.1.option}}"
    debugger: on_failed
    with_subelements:
      - "{{oracle_databaseschopt}}"
      - oracle_EE_options
    become: yes
    become_user: "{{ oracle_user }}"
    register: choptout
    changed_when: '"Writing" in choptout.stdout'
    when: item.0.oracle_edition == 'EE' and item.1.option is defined
    tags:
      - dbchopt

  - name: Generate glogin.sql
    template: src=glogin.sql.j2 dest="{{ oracle_home_db }}/sqlplus/admin/glogin.sql" backup=yes
    with_items:
        - "{{ oracle_databases }}"
    loop_control:
      loop_var: dbh
    when: oracle_databases is defined
    tags: oradbinstall

  - name: install-home-db | Unmount nfs share with installation media
    mount: src="{{ nfs_server_sw }}:{{ nfs_server_sw_path }}" name={{ oracle_stage_remote }} fstype=nfs state=absent
    when: install_from_nfs
    tags:
      - nfsunmountdb

  - name: install-home-db | Check if systemd or init.d is used
    shell: ps -e|grep " 1 ?"|cut -d " " -f15
    tags:
    - checkinitdaemons
    - autostartup_service
    register: checkinitdaemons
    when: autostartup_service

  - include_tasks: "{{ checkinitdaemons.stdout }}.yml"
    when: autostartup_service
