---
- name: Assert oradb_rman
  ansible.builtin.import_tasks:
    file: assert.yml
  tags:
    - always
    - assert

- name: configure autofs for RMAN
  when: oradb_rman_autofs
  tags: autofs
  block:
    # autofs is configured in a special way to mount the shares with needed parameters
    # => no extra configuration file for autofs is needed
    - name: configure auto.master for RMAN
      ansible.builtin.lineinfile:
        dest: "/etc/auto.master"
        regexp: "^{{ rmanautofsmount }} "
        line: "{{ rmanautofsmount }} /etc/auto.net --timeout=60 rw,hard,rsize=32768,wsize=32768,proto=tcp,nfsvers=3"

    # IMPORTANT: Do not own the mountpoint by Oracle!
    # => Prevent writing RMAN backups to wrong mount point
    # => The target directory is owned by Oracle.
    - name: Create Mountpoint for autofs
      ansible.builtin.file:
        dest: "{{ rmanautofsmount }}"
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: Restart autofs
      ansible.builtin.service:
        name: autofs
        enabled: true
        state: restarted

- name: Create bin-Directory for rman_backup
  ansible.builtin.file:
    path: "{{ oracle_base }}/bin"
    state: directory
    mode: '0755'
  tags:
    - rmancopy

- name: Create log-Directory for cron output
  ansible.builtin.file:
    path: "{{ oradb_rman_cron_logdir }}"
    state: directory
    mode: '0755'
    owner: "{{ oracle_user }}"
  tags:
    - rmancron
    - rmancopy

# dummy with_together for item.0.db_name in default/main.yml
- name: Create Directory for rman-scripts
  ansible.builtin.file:
    path: "{{ oradb_rman_script_dir }}"
    state: directory
    mode: '0755'
    owner: "{{ oracle_user }}"
  loop: "{{ oracle_databases }}"
  loop_control:
    loop_var: odb
    label: "oracle_db_name {{ odb.oracle_db_name | default('') }}"
  tags:
    - rmancopy

# dummy with_together for item.0.db_name in default/main.yml
- name: Create Directory for rman-logfiles
  ansible.builtin.file:
    path: "{{ oradb_rman_log_dir }}"
    state: "directory"
    mode: '0755'
    owner: "{{ oracle_user }}"
  loop: "{{ oracle_databases }}"
  loop_control:
    loop_var: odb
    label: "oracle_db_name {{ odb.oracle_db_name | default('') }}"
  tags:
    - rmancopy

- name: copy rman_backup.sh
  ansible.builtin.copy:
    dest: "{{ oracle_base }}/bin"
    src: "rman_backup.sh"
    backup: true
    mode: '0755'
  tags:
    - rmancopy

- name: copy RMAN scipts
  ansible.builtin.template:
    dest: "{{ oradb_rman_script_dir }}/{{ odb.1.name }}.rman"
    src: "{{ odb.1.name }}.rman.j2"
    backup: true
    mode: '0644'
    owner: "{{ oracle_user }}"
  with_subelements:
    - "{{ oracle_databases }}"
    - rman_jobs
    - skip_missing: true
  when: odb.1.state | default('present') == 'present'
  loop_control:
    loop_var: odb
    label: >-
      oracle_db_name {{ odb.0.oracle_db_name | default('') }}
      job {{ odb.1.name | default('') }}
  tags:
    - rmancopy

- name: Create directory for TNS_ADMIN
  ansible.builtin.file:
    dest: "{{ oradb_rman_tns_admin }}"
    state: directory
    owner: "{{ oracle_user }}"
    mode: '0755'
  loop: "{{ oracle_databases | selectattr('rman_tnsalias', 'defined') | map(attribute='oracle_db_name') }}"
  loop_control:
    loop_var: odb
    label: "oracle_db_name {{ oracle_db_name | default('') }}"
  tags:
    - tns

- name: Template sqlnet.ora for rman catalog wallet
  ansible.builtin.template:
    src: "sqlnet.ora.j2"
    dest: "{{ oradb_rman_tns_admin }}/sqlnet.ora"
    owner: "{{ oracle_user }}"
    mode: '0644'
  with_items:
    - "{{ oracle_databases | selectattr('rman_tnsalias', 'defined') | selectattr('rman_wallet', 'defined') }}"
  loop_control:
    loop_var: odb
    label: "oracle_db_name {{ odb.oracle_db_name | default('') }}"
  when: odb.rman_wallet
  tags:
    - tns

- name: Create tnsnames.ora for rman
  vars:
    _rman_tnsnames_installed:
  block:
    - name: Create tnsnames.ora for rman
      ansible.builtin.include_tasks:
        file: tnsnames_detail.yml
      vars:
        tnsnames_installed_rman:  # set single entry for RMAN
          - home: "{{ odb.home }}"
            tnsname: "{{ odb.rman_tnsalias }}"
            state: present
        _tnsnames_installed: "{{ tnsnames_installed_rman + oradb_rman_tnsnames_installed | default([]) }}"
      with_items:
        - "{{ oracle_databases }}"
      loop_control:
        loop_var: odb
        label: >-
          oracle_db_name {{ odb.oracle_db_name | default('') }}
          rman_tnsalias {{ odb.rman_tnsalias | default('') }}
      when:
        - odb.rman_tnsalias is defined
      tags:
        - tns
        - tnsnames

- name: Create wallet directory
  ansible.builtin.file:
    dest: "{{ oradb_rman_wallet_loc }}"
    state: directory
    mode: '0700'
    owner: "{{ oracle_user }}"
  tags:
    - wallet
    - wallet_contents

- name: Wallet create
  ansible.builtin.shell:
    cmd: |
      set -eu
      set -o pipefail
      echo -e "$stdin" | "${ORACLE_HOME}/bin/mkstore" -create -nologo -wrl "${oradb_rman_wallet_loc}"
    creates: "{{ oradb_rman_wallet_loc }}/ewallet.p12"
  become: true
  become_user: "{{ oracle_user }}"
  environment:
    stdin: "{{ oradb_rman_wallet_password }}\n{{ oradb_rman_wallet_password }}"
    oradb_rman_wallet_loc: "{{ oradb_rman_wallet_loc }}"
    ORACLE_HOME: "{{ _oracle_home_db }}"
  with_items:
    - "{{ oracle_databases | selectattr('rman_tnsalias', 'defined') | selectattr('rman_wallet', 'defined') }}"
  loop_control:
    loop_var: odb
    label: "oracle_db_name {{ odb.oracle_db_name | default('') }}"
  when:
    - odb.rman_tnsalias is defined
    - odb.rman_wallet
  tags:
    - wallet
    - wallet_contents
  register: wallet_created

- name: List wallet contents
  ansible.builtin.shell:
    cmd: |
      set -eu
      set -o pipefail
      echo "$stdin" | "{{ _oracle_home_db }}/bin/mkstore" -listCredential -nologo -wrl "{{ oradb_rman_wallet_loc }}"
  become: true
  become_user: "{{ oracle_user }}"
  environment:
    stdin: "{{ oradb_rman_wallet_password }}"
  with_items:
    - "{{ oracle_databases | selectattr('rman_tnsalias', 'defined') | selectattr('rman_wallet', 'defined') }}"
  when:
    - odb.rman_tnsalias is defined
    - odb.rman_wallet
    - not wallet_created.changed
  changed_when: false  # does not change anything in System
  loop_control:
    loop_var: odb
    label: "oracle_db_name {{ odb.oracle_db_name | default('') }}"
  tags:
    - wallet
    - wallet_contents
  register: wallet_contents

- name: Wallet createCredential
  ansible.builtin.shell:
    cmd: |
      set -eu
      set -o pipefail
      echo "$stdin" | "{{ _oracle_home_db }}/bin/mkstore" -wrl "{{ oradb_rman_wallet_loc }}" -nologo -createCredential "$rman_tnsalias" "$rman_user" "$rman_password"
  # noqa no-changed-when
  become: true
  become_user: "{{ oracle_user }}"
  environment:
    stdin: "{{ oradb_rman_wallet_password }}"
    rman_tnsalias: "{{ odb.rman_tnsalias }}"
    rman_user: "{{ odb.rman_user }}"
    rman_password: "{{ dbpasswords[odb.rman_tnsalias][odb.rman_user] | default(odb.rman_password) }}"
  with_items:
    - "{{ oracle_databases | selectattr('rman_tnsalias', 'defined') | selectattr('rman_wallet', 'defined') }}"
  when:
    - odb.rman_wallet
    - odb.rman_tnsalias is defined
    - odb.rman_user is defined
    - "wallet_created.changed or ((': ' + odb.rman_tnsalias + ' ' + odb.rman_user) not in (wallet_contents.results[loopidx].stdout | default('')))"
  loop_control:
    label: "oracle_db_name {{ odb.oracle_db_name | default('') }}"
    index_var: loopidx
    loop_var: odb
  register: wallet_credential_added
  tags:
    - wallet

- name: Wallet modifyCredential to ensure password is up to date
  ansible.builtin.shell:
    cmd: |
      set -eu
      set -o pipefail
      echo "$stdin" | "{{ _oracle_home_db }}/bin/mkstore" -wrl "{{ oradb_rman_wallet_loc }}" -nologo -modifyCredential "$rman_tnsalias" "$rman_user" "$rman_password"
  become: true
  become_user: "{{ oracle_user }}"
  changed_when: false  # no simple way to figure out whether this changed the password or not, does not matter.
  environment:
    stdin: "{{ oradb_rman_wallet_password }}"
    rman_tnsalias: "{{ odb.rman_tnsalias }}"
    rman_user: "{{ odb.rman_user }}"
    rman_password: "{{ dbpasswords[odb.rman_tnsalias][odb.rman_user] | default(odb.rman_password) }}"
  with_items:
    - "{{ oracle_databases | selectattr('rman_tnsalias', 'defined') | selectattr('rman_wallet', 'defined') }}"
  when:
    - odb.rman_wallet | default(false)
    - not wallet_created.changed
    - not wallet_credential_added.changed
  loop_control:
    label: "oracle_db_name {{ odb.oracle_db_name | default('') }}"
    loop_var: odb
  tags:
    - wallet

- name: Register Database in RMAN Catalog
  become: true
  become_user: "{{ oracle_user }}"
  ansible.builtin.shell:
    cmd: "$ORACLE_HOME/bin/rman target / catalog $CONNECTSTRING"
    stdin: "REGISTER DATABASE;\n"
  environment:
    ORACLE_HOME: "{{ _oracle_home_db }}"
    ORACLE_SID: "{{ odb.oracle_db_name }}"
    CONNECTSTRING: "{{ rman_register_connect }}"
    TNS_ADMIN: "{{ oradb_rman_tns_admin }}"
  with_items:
    - "{{ oracle_databases | selectattr('rman_tnsalias', 'defined') }}"
  loop_control:
    label: "oracle_db_name {{ odb.oracle_db_name | default('') }}"
    loop_var: odb
  register: rman_catalog_register
  failed_when: '"RMAN-" in rman_catalog_register.stdout and "RMAN-20002" not in rman_catalog_register.stdout'
  changed_when: '"RMAN-20002" not in rman_catalog_register.stdout'
  tags:
    - rmanregister

# the following task is usefull for configuration of rman-parameters during setup of RMAN
# It's also possible to execute the 1st Level0-Backup after setup, but be aware to configure the RMAN before starting a backup
# The execution isn't done in async mode!
# The task is only execute once on master_node when GI is installed!
# no catalog connection, because setting initial parameters with catalog takes much more time
- name: Execute RMAN-Script at playbook
  # noqa risky-shell-pipe no-changed-when
  ansible.builtin.shell: >-
    {{ oracle_base }}/bin/rman_backup.sh
    -a {{ odb.1.name }}
    -s {{ odb.0.oracle_db_instance_name | default(odb.0.oracle_db_name) }}
    -r {{ oradb_rman_script_dir }}
    -l {{ oradb_rman_log_dir }} | tee -a {{ rman_cron_logdir }}/rman_{{ odb.1.name }}.log
  environment:
    PATH: /bin:/usr/bin
  become: true
  become_user: "{{ oracle_user }}"
  register: rmanexecimmediate
  with_subelements:
    - "{{ oracle_databases }}"
    - rman_jobs
    - skip_missing: true
  loop_control:
    label: >-
      oracle_db_name {{ odb.0.oracle_db_name | default('') }}
      job {{ odb.1.name | default('') }}
    loop_var: odb
  when:
    - odb.1.immediate is defined
    - odb.1.immediate
    - odb.1.state | default('present') == 'present'
    - _orasw_meta_primary_node | bool
  tags:
    - rmanexecute

- name: RMAN-Script at playbook output  # noqa no-handler
  ansible.builtin.debug:
    msg: "{{ item.stdout_lines }}"
  with_items:
    - "{{ rmanexecimmediate.results }}"
  when: item.changed
  loop_control:
    label: >-
      oracle_db_name {{ item.item[0].oracle_db_name | default(' ') }}
      job {{ item.item[1].name | default('') }}
  tags:
    - rmanexecute

- name: Add Environment variables to /etc/cron.d
  ansible.builtin.cron:
    cron_file: "{{ oradb_rman_cronfile }}"
    user: "{{ oracle_user }}"
    env: true
    name: "{{ item.name }}"
    value: "{{ item.value }}"
  with_items:
    - {name: RMANLOGDIR, value: '{{ oradb_rman_log_dir }}'}
    - {name: RMANSCRIPTDIR, value: '{{ oradb_rman_script_dir }}'}
    - {name: RMANTNS_ADMIN, value: '{{ oradb_rman_tns_admin }}'}
  tags:
    - rmancron
    - notest

- name: Create crontab entries for RMAN Backup
  ansible.builtin.cron:
    name: rman_backup_{{ odb.0.oracle_db_name }}_{{ odb.1.name }}
    cron_file: "{{ oradb_rman_cronfile }}"
    user: "{{ oracle_user }}"
    disabled: "{{ odb.1.disabled | default(false) }}"
    state: "present"
    day: "{{ odb.1.day }}"
    weekday: "{{ odb.1.weekday }}"
    hour: "{{ odb.1.hour }}"
    minute: "{{ odb.1.minute }}"
    job: >-
      {{ _oradb_rman_checkmk_mkjob_string }}
      {{ oracle_base }}/bin/rman_backup.sh
      -a {{ odb.1.name }}
      -s {{ odb.0.oracle_db_instance_name | default(odb.0.oracle_db_name) }}
      {{ _oradb_rman_rman_service_param }}
      {{ _oradb_rman_rman_catalog_param }}
      {{ _oradb_rman_rmanbackuplogdir }}
      {{ _oradb_rman_rmanbackupscriptdir }}
      >> {{ oradb_rman_cron_logdir }}/rman_{{ odb.0.oracle_db_name }}_{{ odb.1.name }}.log 2>&1
  with_subelements:
    - "{{ oracle_databases }}"
    - rman_jobs
    - skip_missing: true
  loop_control:
    loop_var: odb
    label: >-
      oracle_db_name: {{ odb.0.oracle_db_name | default('') }}
      job: {{ odb.1.name | default('') }}
      disabled: {{ odb.1.disabled | default(false) }}
      state: {{ odb.1.state | default('present') }}
  when:
    - odb.1 is defined
    - odb.1.day is defined
    - odb.1.weekday is defined
    - odb.1.hour is defined
    - odb.1.minute is defined
    - odb.1.name is defined
    - odb.1.state | default('present') == 'present'
  tags:
    - rmancron
    - notest

- name: Remove crontab entries for RMAN Backup
  ansible.builtin.cron:
    name: rman_backup_{{ odb.0.oracle_db_name }}_{{ odb.1.name }}
    cron_file: "{{ oradb_rman_cronfile }}"
    user: "{{ oracle_user }}"
    state: "absent"
  with_subelements:
    - "{{ oracle_databases }}"
    - rman_jobs
    - skip_missing: true
  loop_control:
    loop_var: odb
    label: >-
      oracle_db_name: {{ odb.0.oracle_db_name | default('') }}
      state: {{ odb.1.state | default('present') }}
  when:
    - odb.1 is defined
    - odb.1.name is defined
    - odb.1.state | default('present') == 'absent'
  tags:
    - rmancron
    - notest

- name: Create directory for mk-job
  ansible.builtin.file:
    dest: "/var/lib/check_mk_agent/job/{{ oracle_user }}"
    state: directory
    owner: "{{ oracle_user }}"
    mode: '0755'
  when: oradb_rman_cron_mkjob
  tags: rmancron
