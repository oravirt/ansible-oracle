# -*- mode: ruby -*-
# vi: set ft=ruby :


# Variables
var_box                  = 'oraclebase/oracle-8'
var_mem_size             = 8192                      # Memory size in M.
var_vm_name              = 'ansmanual'
var_cpus                 = 4                         # Number of vCPUs
var_non_rotational       = 'on'                      # SSD
var_disk_name            = './ol8_u01.vdi'
var_disk_size            = 50                        # number in GB
var_root_disk_size      = '64GB'                     # use text, e.g. '50GB'

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = var_box
  config.disksize.size = var_root_disk_size
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  #config.vm.network "forwarded_port", guest: 80, host: 8080
  #config.vm.network "forwarded_port", guest: 443, host: 8443

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  config.vm.network "public_network"

  # Add a new public network. Default is NAT (10.0.2.x). Public is 192.168.x.x
  # config.vm.network "private_network", ip: var_public_ip, virtualbox__intnet: "public"     
  # config.vm.network "private_network", type: "dhcp", virtualbox__intnet: "public"     


  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  ##### config.vm.synced_folder "/../../ala/RAC_gnrl", "/u01/install"
  config.vm.synced_folder "/../../programs/Oracle/rdbms/linux/19.0", "/u01/software"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessable to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true
  # config.vm.hostname = var_vm_name
  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
     # Display the VirtualBox GUI when booting the machine
     vb.gui = true
 
     vb.memory = var_mem_size
     vb.cpus   = var_cpus
     vb.name   = var_vm_name
     vb.customize ['modifyvm', :id, '--clipboard', 'bidirectional']
     vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', '0', '--nonrotational', var_non_rotational]
     unless File.exist?(var_disk_name)
        vb.customize ['createhd', '--filename', var_disk_name, '--size', var_disk_size * 1024]
     end
     vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--nonrotational', var_non_rotational, '--medium', var_disk_name]
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  Vagrant::Config.run do |config|
    # Enable X11
    config.ssh.forward_x11 = true
  end
  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
  sh /vagrant/scripts/setup.sh
    # copy public key to vagrant user
    ssh_public_key=$(find /vagrant/*.pub -printf "%p")
    if test -f "$ssh_public_key" ; then
      echo "Check if public key $ssh_public_key is valid."
      if ssh-keygen -l -f "$ssh_public_key" ; then
        echo "Add public key to /home/vagrant/.ssh/authorized_keys"
        cat "$ssh_public_key" >> /home/vagrant/.ssh/authorized_keys
      fi
    fi
    sh /vagrant/scripts/ansible_setup.sh
SHELL
end

